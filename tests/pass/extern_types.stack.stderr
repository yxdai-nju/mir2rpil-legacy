warning: integer-to-pointer cast
  --> $DIR/extern_types.rs:LL:CC
   |
LL |     let x: &Foo = unsafe { &*(16 as *const Foo) };
   |                              ^^^^^^^^^^^^^^^^^^ integer-to-pointer cast
   |
   = help: this program is using integer-to-pointer casts or (equivalently) `ptr::with_exposed_provenance`, which means that Miri might miss pointer bugs in this program
   = help: see https://doc.rust-lang.org/nightly/std/ptr/fn.with_exposed_provenance.html for more details on that operation
   = help: to ensure that Miri does not miss bugs in your program, use Strict Provenance APIs (https://doc.rust-lang.org/nightly/std/ptr/index.html#strict-provenance, https://crates.io/crates/sptr) instead
   = help: you can then set `MIRIFLAGS=-Zmiri-strict-provenance` to ensure you are not relying on `with_exposed_provenance` semantics
   = help: alternatively, `MIRIFLAGS=-Zmiri-permissive-provenance` disables this warning
   = note: BACKTRACE:
   = note: inside `main` at $DIR/extern_types.rs:LL:CC

warning: reborrow of reference to `extern type`
  --> $DIR/extern_types.rs:LL:CC
   |
LL |     let x: &Foo = unsafe { &*(16 as *const Foo) };
   |                            ^^^^^^^^^^^^^^^^^^^^ reborrow of a reference to `extern type` is not properly supported
   |
   = help: `extern type` are not compatible with the Stacked Borrows aliasing model implemented by Miri; Miri may miss bugs in this code
   = help: try running with `MIRIFLAGS=-Zmiri-tree-borrows` to use the more permissive but also even more experimental Tree Borrows aliasing checks instead
   = note: BACKTRACE:
   = note: inside `main` at $DIR/extern_types.rs:LL:CC

