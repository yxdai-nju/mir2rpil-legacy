Public functions: [
    DefId(0:24 ~ simple[3ce3]::do_something),
]

[MIR] `do_something` 24:
bb0 of `do_something` 24:
Statement: Assign((_1, TwoMembers { p1: const 42_isize, p2: const 43_isize }))
[Rvalue] Aggregate(Adt(DefId(0:4 ~ simple[3ce3]::TwoMembers), 0, [], None, None), [const 42_isize, const 43_isize])
[AggregateKind] Adt(variant_idx=0)
Statement: Assign((_2, TwoMembers { p1: const 44_isize, p2: (_1.1: isize) }))
[Rvalue] Aggregate(Adt(DefId(0:4 ~ simple[3ce3]::TwoMembers), 0, [], None, None), [const 44_isize, (_1.1: isize)])
[AggregateKind] Adt(variant_idx=0)
[Projection] _1, [Field(1, isize)]
[Projection Result] $1.p1
[RPIL] BIND $2.v0p1, $1.p1
Statement: Assign((_4, move _2))
[Rvalue] Use(move _2)
[RPIL] MOVE $2
[RPIL] BIND $4, $2
Statement: Assign((_3, std::option::Option::<TwoMembers>::Some(move _4)))
[Rvalue] Aggregate(Adt(DefId(2:36549 ~ core[b5cd]::option::Option), 1, [TwoMembers], None, None), [move _4])
[AggregateKind] Adt(variant_idx=1)
[RPIL] MOVE $4
[RPIL] BIND $3.v1p0, $4
Statement: Assign((_6, move _3))
[Rvalue] Use(move _3)
[RPIL] MOVE $3
[RPIL] BIND $6, $3
Statement: Assign((_5, ThreeVariants::Variant2(const 45_u8, const 46_u8, const 47_u8, const 48_u8, move _6)))
[Rvalue] Aggregate(Adt(DefId(0:7 ~ simple[3ce3]::ThreeVariants), 2, [], None, None), [const 45_u8, const 46_u8, const 47_u8, const 48_u8, move _6])
[AggregateKind] Adt(variant_idx=2)
[RPIL] MOVE $6
[RPIL] BIND $5.v2p4, $6
Statement: Assign((_9, discriminant(_5)))
Terminator: SwitchInt(move _9)
Next: [bb2, bb1]
---
bb1 of `do_something` 24:
Terminator: Assign((_11, core::panicking::panic[Spanned { node: const "internal error: entered unreachable code", span: /Users/dnomkr/.rustup/toolchains/miri/lib/rustlib/src/rust/library/core/src/panic.rs:137:34: 137:76 (#6) }]))
[MIR] `core::panicking::panic` 9717:
bb0 of `core::panicking::panic` 9717:
Statement: Assign((_7, _1))
[Rvalue] Use(_1)
[RPIL] BIND $7, $1
Statement: Assign((_6, [move _7]))
[Rvalue] Aggregate(Array(&'{erased} str), [move _7])
[AggregateKind] Array([move _7])
[RPIL] MOVE $7
[RPIL] BIND $6.p0, $7
Statement: Assign((_5, &_6))
[Rvalue] Ref(_6)
[RPIL] BORROW $5, $6
Statement: Assign((_4, &(*_5)))
[Rvalue] Ref((*_5))
[Projection] _5, [Deref]
[Projection Result] ($5)*
[RPIL] BORROW $4, ($5)*
Terminator: Assign((_3, std::fmt::Arguments::<'_>::new_const::<1>[Spanned { node: move _4, span: /Users/dnomkr/.rustup/toolchains/miri/lib/rustlib/src/rust/library/core/src/panicking.rs:148:41: 148:48 (#0) }]))
[MIR] `std::fmt::Arguments::<'a>::new_const` 10777:
bb0 of `std::fmt::Arguments::<'a>::new_const` 10777:
Statement: Assign((_2, const std::fmt::Arguments::<'_>::new_const::<N>::{constant#1}))
[Rvalue] Use(const std::fmt::Arguments::<'_>::new_const::<N>::{constant#1})
Statement: Assign((_4, &(*_1)))
[Rvalue] Ref((*_1))
[Projection] _1, [Deref]
[Projection Result] ($1)*
[RPIL] BORROW $4, ($1)*
Statement: Assign((_3, move _4 as &[&str] (PointerCoercion(Unsize))))
[Rvalue] Cast(move _4)
[RPIL] MOVE $4
[RPIL] BIND $3, $4
Statement: Assign((_5, std::option::Option::<&[core::fmt::rt::Placeholder]>::None))
[Rvalue] Aggregate(Adt(DefId(2:36549 ~ core[b5cd]::option::Option), 0, [&'{erased} [core::fmt::rt::Placeholder]], None, None), [])
[AggregateKind] Adt(variant_idx=0)
Statement: Assign((_10, const std::fmt::Arguments::<'_>::new_const::<N>::promoted[0]))
[Rvalue] Use(const std::fmt::Arguments::<'_>::new_const::<N>::promoted[0])
Statement: Assign((_8, &(*_10)))
[Rvalue] Ref((*_10))
[Projection] _10, [Deref]
[Projection Result] ($10)*
[RPIL] BORROW $8, ($10)*
Statement: Assign((_7, &(*_8)))
[Rvalue] Ref((*_8))
[Projection] _8, [Deref]
[Projection Result] ($8)*
[RPIL] BORROW $7, ($8)*
Statement: Assign((_6, move _7 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize))))
[Rvalue] Cast(move _7)
[RPIL] MOVE $7
[RPIL] BIND $6, $7
Statement: Assign((_0, std::fmt::Arguments::<'_> { pieces: move _3, fmt: move _5, args: move _6 }))
[Rvalue] Aggregate(Adt(DefId(2:37802 ~ core[b5cd]::fmt::Arguments), 0, ['{erased}], None, None), [move _3, move _5, move _6])
[AggregateKind] Adt(variant_idx=0)
[RPIL] MOVE $3
[RPIL] BIND $0.v0p0, $3
[RPIL] MOVE $5
[RPIL] BIND $0.v0p1, $5
[RPIL] MOVE $6
[RPIL] BIND $0.v0p2, $6
Next: return
---
[RPIL] `std::fmt::Arguments::<'a>::new_const` 10777:
    BORROW $4, ($1)*
    MOVE $4
    BIND $3, $4
    BORROW $8, ($10)*
    BORROW $7, ($8)*
    MOVE $7
    BIND $6, $7
    MOVE $3
    BIND $0.v0p0, $3
    MOVE $5
    BIND $0.v0p1, $5
    MOVE $6
    BIND $0.v0p2, $6
Next: Some(bb1)
---
bb1 of `core::panicking::panic` 9717:
Terminator: Assign((_2, std::rt::panic_fmt[Spanned { node: move _3, span: /Users/dnomkr/.rustup/toolchains/miri/lib/rustlib/src/rust/library/core/src/panicking.rs:148:15: 148:49 (#0) }]))
[MIR] `std::rt::panic_fmt` 9709:
bb0 of `std::rt::panic_fmt` 9709:
Statement: Assign((_3, const false))
[Rvalue] Use(const false)
Terminator: SwitchInt(move _3)
Next: [bb2, bb1]
---
bb1 of `std::rt::panic_fmt` 9709:
Terminator: Assign((_4, std::intrinsics::abort[]))
[MIR] `std::intrinsics::abort` 1681:
    (empty)
[RPIL] `std::intrinsics::abort` 1681:
    (empty)
Next: None
---
bb2 of `std::rt::panic_fmt` 9709:
Statement: Assign((_2, const ()))
[Rvalue] Use(const ())
Statement: Assign((_6, _1))
[Rvalue] Use(_1)
[RPIL] BIND $6, $1
Terminator: Assign((_8, std::panic::Location::<'_>::caller[]))
[MIR] `std::panic::Location::<'a>::caller` 9571:
bb0 of `std::panic::Location::<'a>::caller` 9571:
Terminator: Assign((_0, std::intrinsics::caller_location[]))
[MIR] `std::intrinsics::caller_location` 1706:
    (empty)
[RPIL] `std::intrinsics::caller_location` 1706:
    (empty)
Next: Some(bb1)
---
bb1 of `std::panic::Location::<'a>::caller` 9571:
Next: return
---
[RPIL] `std::panic::Location::<'a>::caller` 9571:
    (empty)
Next: Some(bb3)
---
bb3 of `std::rt::panic_fmt` 9709:
Statement: Assign((_7, &(*_8)))
[Rvalue] Ref((*_8))
[Projection] _8, [Deref]
[Projection Result] ($8)*
[RPIL] BORROW $7, ($8)*
Terminator: Assign((_5, core::panic::panic_info::PanicInfo::<'_>::new[Spanned { node: move _6, span: /Users/dnomkr/.rustup/toolchains/miri/lib/rustlib/src/rust/library/core/src/panicking.rs:67:9: 67:12 (#0) }, Spanned { node: move _7, span: /Users/dnomkr/.rustup/toolchains/miri/lib/rustlib/src/rust/library/core/src/panicking.rs:68:9: 68:27 (#0) }, Spanned { node: const true, span: /Users/dnomkr/.rustup/toolchains/miri/lib/rustlib/src/rust/library/core/src/panicking.rs:69:26: 69:30 (#0) }, Spanned { node: const false, span: /Users/dnomkr/.rustup/toolchains/miri/lib/rustlib/src/rust/library/core/src/panicking.rs:70:34: 70:39 (#0) }]))
[MIR] `core::panic::panic_info::PanicInfo::<'a>::new` 9590:
bb0 of `core::panic::panic_info::PanicInfo::<'a>::new` 9590:
Statement: Assign((_5, &(*_2)))
[Rvalue] Ref((*_2))
[Projection] _2, [Deref]
[Projection Result] ($2)*
[RPIL] BORROW $5, ($2)*
Statement: Assign((_6, _1))
[Rvalue] Use(_1)
[RPIL] BIND $6, $1
Statement: Assign((_7, _3))
[Rvalue] Use(_3)
[RPIL] BIND $7, $3
Statement: Assign((_8, _4))
[Rvalue] Use(_4)
[RPIL] BIND $8, $4
Statement: Assign((_0, core::panic::panic_info::PanicInfo::<'_> { message: move _6, location: move _5, can_unwind: move _7, force_no_backtrace: move _8 }))
[Rvalue] Aggregate(Adt(DefId(2:36633 ~ core[b5cd]::panic::panic_info::PanicInfo), 0, ['{erased}], None, None), [move _6, move _5, move _7, move _8])
[AggregateKind] Adt(variant_idx=0)
[RPIL] MOVE $6
[RPIL] BIND $0.v0p0, $6
[RPIL] MOVE $5
[RPIL] BIND $0.v0p1, $5
[RPIL] MOVE $7
[RPIL] BIND $0.v0p2, $7
[RPIL] MOVE $8
[RPIL] BIND $0.v0p3, $8
Next: return
---
[RPIL] `core::panic::panic_info::PanicInfo::<'a>::new` 9590:
    BORROW $5, ($2)*
    BIND $6, $1
    BIND $7, $3
    BIND $8, $4
    MOVE $6
    BIND $0.v0p0, $6
    MOVE $5
    BIND $0.v0p1, $5
    MOVE $7
    BIND $0.v0p2, $7
    MOVE $8
    BIND $0.v0p3, $8
Next: Some(bb4)
---
bb4 of `std::rt::panic_fmt` 9709:
Statement: Assign((_10, &_5))
[Rvalue] Ref(_5)
[RPIL] BORROW $10, $5
Statement: Assign((_9, &(*_10)))
[Rvalue] Ref((*_10))
[Projection] _10, [Deref]
[Projection Result] ($10)*
[RPIL] BORROW $9, ($10)*
Terminator: Assign((_0, std::rt::panic_fmt::panic_impl[Spanned { node: move _9, span: /Users/dnomkr/.rustup/toolchains/miri/lib/rustlib/src/rust/library/core/src/panicking.rs:74:25: 74:28 (#0) }]))
[MIR] `std::rt::panic_fmt::panic_impl` 9711:
    (empty)
[RPIL] `std::rt::panic_fmt::panic_impl` 9711:
    (empty)
Next: None
---
[RPIL] `std::rt::panic_fmt` 9709:
    BIND $6, $1
    BORROW $7, ($8)*
    BORROW $10, $5
    BORROW $9, ($10)*
Next: None
---
[RPIL] `core::panicking::panic` 9717:
    BIND $7, $1
    MOVE $7
    BIND $6.p0, $7
    BORROW $5, $6
    BORROW $4, ($5)*
Next: None
---
bb2 of `do_something` 24:
Statement: Assign((_10, move ((_5 as Variant2).4: std::option::Option<TwoMembers>)))
[Rvalue] Use(move ((_5 as Variant2).4: std::option::Option<TwoMembers>))
[Projection] _5, [Downcast(Some("Variant2"), 2), Field(4, std::option::Option<TwoMembers>)]
[Projection Result] $5.v2p4
[RPIL] MOVE $5.v2p4
[Projection] _5, [Downcast(Some("Variant2"), 2), Field(4, std::option::Option<TwoMembers>)]
[Projection Result] $5.v2p4
[RPIL] BIND $10, $5.v2p4
Statement: Assign((_8, move _10))
[Rvalue] Use(move _10)
[RPIL] MOVE $10
[RPIL] BIND $8, $10
Terminator: Assign((_7, std::option::Option::<TwoMembers>::unwrap[Spanned { node: move _8, span: playground/simple.rs:21:5: 24:6 (#0) }]))
[MIR] `std::option::Option::<T>::unwrap` 9362:
bb0 of `std::option::Option::<T>::unwrap` 9362:
Statement: Assign((_2, discriminant(_1)))
Terminator: SwitchInt(move _2)
Next: [bb2, bb3, bb1]
---
bb1 of `std::option::Option::<T>::unwrap` 9362:
Next: !
---
bb2 of `std::option::Option::<T>::unwrap` 9362:
Terminator: Assign((_4, std::option::unwrap_failed[]))
[MIR] `std::option::unwrap_failed` 9431:
bb0 of `std::option::unwrap_failed` 9431:
Terminator: Assign((_0, core::panicking::panic[Spanned { node: const "called `Option::unwrap()` on a `None` value", span: /Users/dnomkr/.rustup/toolchains/miri/lib/rustlib/src/rust/library/core/src/option.rs:2013:11: 2013:56 (#0) }]))
[MIR] `core::panicking::panic` 9717:
bb0 of `core::panicking::panic` 9717:
Statement: Assign((_7, _1))
[Rvalue] Use(_1)
[RPIL] BIND $7, $1
Statement: Assign((_6, [move _7]))
[Rvalue] Aggregate(Array(&'{erased} str), [move _7])
[AggregateKind] Array([move _7])
[RPIL] MOVE $7
[RPIL] BIND $6.p0, $7
Statement: Assign((_5, &_6))
[Rvalue] Ref(_6)
[RPIL] BORROW $5, $6
Statement: Assign((_4, &(*_5)))
[Rvalue] Ref((*_5))
[Projection] _5, [Deref]
[Projection Result] ($5)*
[RPIL] BORROW $4, ($5)*
Terminator: Assign((_3, std::fmt::Arguments::<'_>::new_const::<1>[Spanned { node: move _4, span: /Users/dnomkr/.rustup/toolchains/miri/lib/rustlib/src/rust/library/core/src/panicking.rs:148:41: 148:48 (#0) }]))
[MIR] `std::fmt::Arguments::<'a>::new_const` 10777:
bb0 of `std::fmt::Arguments::<'a>::new_const` 10777:
Statement: Assign((_2, const std::fmt::Arguments::<'_>::new_const::<N>::{constant#1}))
[Rvalue] Use(const std::fmt::Arguments::<'_>::new_const::<N>::{constant#1})
Statement: Assign((_4, &(*_1)))
[Rvalue] Ref((*_1))
[Projection] _1, [Deref]
[Projection Result] ($1)*
[RPIL] BORROW $4, ($1)*
Statement: Assign((_3, move _4 as &[&str] (PointerCoercion(Unsize))))
[Rvalue] Cast(move _4)
[RPIL] MOVE $4
[RPIL] BIND $3, $4
Statement: Assign((_5, std::option::Option::<&[core::fmt::rt::Placeholder]>::None))
[Rvalue] Aggregate(Adt(DefId(2:36549 ~ core[b5cd]::option::Option), 0, [&'{erased} [core::fmt::rt::Placeholder]], None, None), [])
[AggregateKind] Adt(variant_idx=0)
Statement: Assign((_10, const std::fmt::Arguments::<'_>::new_const::<N>::promoted[0]))
[Rvalue] Use(const std::fmt::Arguments::<'_>::new_const::<N>::promoted[0])
Statement: Assign((_8, &(*_10)))
[Rvalue] Ref((*_10))
[Projection] _10, [Deref]
[Projection Result] ($10)*
[RPIL] BORROW $8, ($10)*
Statement: Assign((_7, &(*_8)))
[Rvalue] Ref((*_8))
[Projection] _8, [Deref]
[Projection Result] ($8)*
[RPIL] BORROW $7, ($8)*
Statement: Assign((_6, move _7 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize))))
[Rvalue] Cast(move _7)
[RPIL] MOVE $7
[RPIL] BIND $6, $7
Statement: Assign((_0, std::fmt::Arguments::<'_> { pieces: move _3, fmt: move _5, args: move _6 }))
[Rvalue] Aggregate(Adt(DefId(2:37802 ~ core[b5cd]::fmt::Arguments), 0, ['{erased}], None, None), [move _3, move _5, move _6])
[AggregateKind] Adt(variant_idx=0)
[RPIL] MOVE $3
[RPIL] BIND $0.v0p0, $3
[RPIL] MOVE $5
[RPIL] BIND $0.v0p1, $5
[RPIL] MOVE $6
[RPIL] BIND $0.v0p2, $6
Next: return
---
[RPIL] `std::fmt::Arguments::<'a>::new_const` 10777:
    BORROW $4, ($1)*
    MOVE $4
    BIND $3, $4
    BORROW $8, ($10)*
    BORROW $7, ($8)*
    MOVE $7
    BIND $6, $7
    MOVE $3
    BIND $0.v0p0, $3
    MOVE $5
    BIND $0.v0p1, $5
    MOVE $6
    BIND $0.v0p2, $6
Next: Some(bb1)
---
bb1 of `core::panicking::panic` 9717:
Terminator: Assign((_2, std::rt::panic_fmt[Spanned { node: move _3, span: /Users/dnomkr/.rustup/toolchains/miri/lib/rustlib/src/rust/library/core/src/panicking.rs:148:15: 148:49 (#0) }]))
[MIR] `std::rt::panic_fmt` 9709:
bb0 of `std::rt::panic_fmt` 9709:
Statement: Assign((_3, const false))
[Rvalue] Use(const false)
Terminator: SwitchInt(move _3)
Next: [bb2, bb1]
---
bb1 of `std::rt::panic_fmt` 9709:
Terminator: Assign((_4, std::intrinsics::abort[]))
[MIR] `std::intrinsics::abort` 1681:
    (empty)
[RPIL] `std::intrinsics::abort` 1681:
    (empty)
Next: None
---
bb2 of `std::rt::panic_fmt` 9709:
Statement: Assign((_2, const ()))
[Rvalue] Use(const ())
Statement: Assign((_6, _1))
[Rvalue] Use(_1)
[RPIL] BIND $6, $1
Terminator: Assign((_8, std::panic::Location::<'_>::caller[]))
[MIR] `std::panic::Location::<'a>::caller` 9571:
bb0 of `std::panic::Location::<'a>::caller` 9571:
Terminator: Assign((_0, std::intrinsics::caller_location[]))
[MIR] `std::intrinsics::caller_location` 1706:
    (empty)
[RPIL] `std::intrinsics::caller_location` 1706:
    (empty)
Next: Some(bb1)
---
bb1 of `std::panic::Location::<'a>::caller` 9571:
Next: return
---
[RPIL] `std::panic::Location::<'a>::caller` 9571:
    (empty)
Next: Some(bb3)
---
bb3 of `std::rt::panic_fmt` 9709:
Statement: Assign((_7, &(*_8)))
[Rvalue] Ref((*_8))
[Projection] _8, [Deref]
[Projection Result] ($8)*
[RPIL] BORROW $7, ($8)*
Terminator: Assign((_5, core::panic::panic_info::PanicInfo::<'_>::new[Spanned { node: move _6, span: /Users/dnomkr/.rustup/toolchains/miri/lib/rustlib/src/rust/library/core/src/panicking.rs:67:9: 67:12 (#0) }, Spanned { node: move _7, span: /Users/dnomkr/.rustup/toolchains/miri/lib/rustlib/src/rust/library/core/src/panicking.rs:68:9: 68:27 (#0) }, Spanned { node: const true, span: /Users/dnomkr/.rustup/toolchains/miri/lib/rustlib/src/rust/library/core/src/panicking.rs:69:26: 69:30 (#0) }, Spanned { node: const false, span: /Users/dnomkr/.rustup/toolchains/miri/lib/rustlib/src/rust/library/core/src/panicking.rs:70:34: 70:39 (#0) }]))
[MIR] `core::panic::panic_info::PanicInfo::<'a>::new` 9590:
bb0 of `core::panic::panic_info::PanicInfo::<'a>::new` 9590:
Statement: Assign((_5, &(*_2)))
[Rvalue] Ref((*_2))
[Projection] _2, [Deref]
[Projection Result] ($2)*
[RPIL] BORROW $5, ($2)*
Statement: Assign((_6, _1))
[Rvalue] Use(_1)
[RPIL] BIND $6, $1
Statement: Assign((_7, _3))
[Rvalue] Use(_3)
[RPIL] BIND $7, $3
Statement: Assign((_8, _4))
[Rvalue] Use(_4)
[RPIL] BIND $8, $4
Statement: Assign((_0, core::panic::panic_info::PanicInfo::<'_> { message: move _6, location: move _5, can_unwind: move _7, force_no_backtrace: move _8 }))
[Rvalue] Aggregate(Adt(DefId(2:36633 ~ core[b5cd]::panic::panic_info::PanicInfo), 0, ['{erased}], None, None), [move _6, move _5, move _7, move _8])
[AggregateKind] Adt(variant_idx=0)
[RPIL] MOVE $6
[RPIL] BIND $0.v0p0, $6
[RPIL] MOVE $5
[RPIL] BIND $0.v0p1, $5
[RPIL] MOVE $7
[RPIL] BIND $0.v0p2, $7
[RPIL] MOVE $8
[RPIL] BIND $0.v0p3, $8
Next: return
---
[RPIL] `core::panic::panic_info::PanicInfo::<'a>::new` 9590:
    BORROW $5, ($2)*
    BIND $6, $1
    BIND $7, $3
    BIND $8, $4
    MOVE $6
    BIND $0.v0p0, $6
    MOVE $5
    BIND $0.v0p1, $5
    MOVE $7
    BIND $0.v0p2, $7
    MOVE $8
    BIND $0.v0p3, $8
Next: Some(bb4)
---
bb4 of `std::rt::panic_fmt` 9709:
Statement: Assign((_10, &_5))
[Rvalue] Ref(_5)
[RPIL] BORROW $10, $5
Statement: Assign((_9, &(*_10)))
[Rvalue] Ref((*_10))
[Projection] _10, [Deref]
[Projection Result] ($10)*
[RPIL] BORROW $9, ($10)*
Terminator: Assign((_0, std::rt::panic_fmt::panic_impl[Spanned { node: move _9, span: /Users/dnomkr/.rustup/toolchains/miri/lib/rustlib/src/rust/library/core/src/panicking.rs:74:25: 74:28 (#0) }]))
[MIR] `std::rt::panic_fmt::panic_impl` 9711:
    (empty)
[RPIL] `std::rt::panic_fmt::panic_impl` 9711:
    (empty)
Next: None
---
[RPIL] `std::rt::panic_fmt` 9709:
    BIND $6, $1
    BORROW $7, ($8)*
    BORROW $10, $5
    BORROW $9, ($10)*
Next: None
---
[RPIL] `core::panicking::panic` 9717:
    BIND $7, $1
    MOVE $7
    BIND $6.p0, $7
    BORROW $5, $6
    BORROW $4, ($5)*
Next: None
---
[RPIL] `std::option::unwrap_failed` 9431:
    (empty)
Next: None
---
bb3 of `std::option::Option::<T>::unwrap` 9362:
Statement: Assign((_3, move ((_1 as Some).0: T)))
[Rvalue] Use(move ((_1 as Some).0: T))
[Projection] _1, [Downcast(Some("Some"), 1), Field(0, T/#0)]
[Projection Result] $1.v1p0
[RPIL] MOVE $1.v1p0
[Projection] _1, [Downcast(Some("Some"), 1), Field(0, T/#0)]
[Projection Result] $1.v1p0
[RPIL] BIND $3, $1.v1p0
Statement: Assign((_0, move _3))
[Rvalue] Use(move _3)
[RPIL] MOVE $3
[RPIL] BIND $0, $3
Next: return
---
bb4 of `std::option::Option::<T>::unwrap` 9362:
Next: !
---
[RPIL] `std::option::Option::<T>::unwrap` 9362:
    MOVE $1.v1p0
    BIND $3, $1.v1p0
    MOVE $3
    BIND $0, $3
Next: Some(bb3)
---
bb3 of `do_something` 24:
Statement: Assign((_0, (_7.0: isize)))
[Rvalue] Use((_7.0: isize))
[Projection] _7, [Field(0, isize)]
[Projection Result] $7.p0
[RPIL] BIND $0, $7.p0
Next: return
---
[RPIL] `do_something` 24:
    BIND $2.v0p1, $1.p1
    MOVE $2
    BIND $4, $2
    MOVE $4
    BIND $3.v1p0, $4
    MOVE $3
    BIND $6, $3
    MOVE $6
    BIND $5.v2p4, $6
    MOVE $5.v2p4
    BIND $10, $5.v2p4
    MOVE $10
    BIND $8, $10
    BIND $0, $7.p0
